//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AOMC.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AOMC.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hit &quot;compile&quot; to compile the map.
        ///Progress will be shown for each individual part of the compile process..
        /// </summary>
        internal static string help_Compile {
            get {
                return ResourceManager.GetString("help_Compile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Here you may provide general information about the map.
        ///&quot;Map directory&quot; is the subfolder in the AO planetmap directory where your map will be stored.
        ///Bin Structure: 
        ///  Multi:  One binfile per worker
        ///  Single: One binfile for entire map.
        /// </summary>
        internal static string help_General {
            get {
                return ResourceManager.GetString("help_General", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Here you may add images that are used by your map.
        ///Each image should have an unique name, and an image should only be added once.
        ///Rightclick the list, and hit:
        /// Add    to add an image.
        /// Edit   to edit an existing entry
        /// Remove to remove an existing entry.
        /// 
        ///Dialog: Edit image | Add image:
        ///  Doubleclick the &quot;path&quot; text box to get a dialog box to select a file..
        /// </summary>
        internal static string help_Images {
            get {
                return ResourceManager.GetString("help_Images", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a list of the maps choices people will see ingame.
        ///Rightclick the list and hit:
        ///  Add    to add a new version.
        ///  Edit   to edit an existing version.
        ///  Remove to remove an existing version.
        ///
        ///Temporary: (these will be replaced with a more meaningfull syntax eventually)
        ///  Name:
        ///    {0} will be replaced with maps name (provided in the Map Information tab).
        ///    {1} will be replaced with maps version (provided in the Map Information tab).
        ///  Coords File:
        ///    {0} will be replaced with the maps Su [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string help_Mapversions {
            get {
                return ResourceManager.GetString("help_Mapversions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This list shows worker tasks.
        ///&quot;Maprect&quot; is the map rectangle value provided to AO. 
        ///  This has to be provided manually, and cannot be autogenerated, because it depends on the MapCoords.xml.
        ///
        ///Layers - these are images processed by each worker.
        ///  You will only be able to assign an image to a single worker. This is because there&apos;s no point adding the same image twice.
        ///  Add multiple images to a single worker to have it &quot;compare&quot; them, and only add unique slices.
        ///    All the compared images dimensions sh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string help_Workertasks {
            get {
                return ResourceManager.GetString("help_Workertasks", resourceCulture);
            }
        }
    }
}
