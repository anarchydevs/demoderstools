Compiler.cs
	Events:
		Add events which a calling library/application may subscribe to, to get status information.
		Status:
			All Images loaded
			All Images Sliced
			All Worker Tasks Finished
			Assembly finished
		Debug/Notice:
			Image loaded
			Image sliced
			Worker finished a task
	Constructor:
		Make slicers be threadpool-able.
		Make workers be threadpool-able.
		Make the worklist generator only add stuff that's actually used in the text files.
	Assembler:
		Add support for multiple binfiles.
		Add header image to binfiles.
		Replace {0} in txt coordsfile with subdirectory.
		Replace {0} in txt name with map version.
	Worker:
		Report time spent on each task.
	Settings:
		Expose "singlethreaded mode" in config.
Worker.cs
	Optimize the comparer - split task into two threads.
ImageSlicer.cs:
	Split up work in two, and run two separate threads to handle each slice.
	Expose to "singlethreaded mode" in compiler config.
	
Optimizations: (assessments made based on seconds, not percent)
	(done?) Performance testing shows that the largest performance optimization is to be found in the Image Slicer.
	Next-largest is in the comparing worker. (worker is almost instant anyway)
	Then, in the end, the assembler; but only by spewing out completed tasks as they are completed IF we're in multi binfile mode.
		Since it will have to wait for the last slice anyway, this will only be of major benefit when writing to something utterly slow.

String.Format() on configuration settings:
	replace {0},{1} etc with more sensible values, such as {MapName}.
	Probably need a own class for this.